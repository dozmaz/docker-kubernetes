services:
  gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "8080:8080"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - backend
      - mongo-express
      - mongo
      - redis
  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    expose:
      - "8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_AUTH_DATABASE: admin
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: example
    depends_on:
      - mongo
    networks:
      - app-network
  backend:
    build: ./backend
    container_name: backend
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://root:example@mongo:27017/test?authSource=admin
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    depends_on:
      - mongo
      - redis
    networks:
      - app-network
  redis:
    image: redis:8.0.4-alpine3.21
    container_name: redis
    expose:
      - "6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      - app-network
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - mongo
      - backend
    expose:
      - "80"
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.48.0.0/16
volumes:
  mongo_data:
    driver: local
